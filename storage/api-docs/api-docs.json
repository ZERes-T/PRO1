{
    "openapi": "3.0.0",
    "info": {
        "title": "API Documentation",
        "version": "0.1"
    },
    "servers": [
        {
            "url": "https://mebelplace.kz",
            "description": "SuperMakers"
        }
    ],
    "paths": {
        "/api/register": {
            "post": {
                "tags": [
                    "Auth"
                ],
                "summary": "Register a new user",
                "description": "Register a new user with required information",
                "operationId": "registerUser",
                "requestBody": {
                    "required": true,
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "required": [
                                    "phone",
                                    "city_id",
                                    "role"
                                ],
                                "properties": {
                                    "phone": {
                                        "type": "string",
                                        "example": "+77473186847"
                                    },
                                    "username": {
                                        "type": "string",
                                        "example": "johndoe"
                                    },
                                    "city_id": {
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "firstname": {
                                        "type": "string",
                                        "example": "John"
                                    },
                                    "lastname": {
                                        "type": "string",
                                        "example": "Doe"
                                    },
                                    "iin": {
                                        "type": "string",
                                        "maxLength": 12,
                                        "example": "123456789014"
                                    },
                                    "is_visible": {
                                        "type": "integer",
                                        "enum": [
                                            1,
                                            0
                                        ],
                                        "example": 1
                                    },
                                    "photo": {
                                        "description": "Upload photo file",
                                        "type": "string",
                                        "format": "binary"
                                    },
                                    "role": {
                                        "type": "string",
                                        "enum": [
                                            "master",
                                            "user"
                                        ],
                                        "example": "user"
                                    },
                                    "company_type": {
                                        "type": "string",
                                        "enum": [
                                            "ИП",
                                            "ТОО"
                                        ],
                                        "example": "ИП"
                                    },
                                    "company_name": {
                                        "type": "string",
                                        "example": "My Company"
                                    },
                                    "description": {
                                        "type": "string",
                                        "example": "Professional service provider"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "User registered successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "User registered successfully"
                                        },
                                        "user": {
                                            "properties": {
                                                "id": {
                                                    "type": "integer",
                                                    "example": 1
                                                },
                                                "phone": {
                                                    "type": "string",
                                                    "example": "+1234567890"
                                                },
                                                "username": {
                                                    "type": "string",
                                                    "example": "johndoe"
                                                },
                                                "city_id": {
                                                    "type": "integer",
                                                    "example": 1
                                                },
                                                "firstname": {
                                                    "type": "string",
                                                    "example": "John"
                                                },
                                                "lastname": {
                                                    "type": "string",
                                                    "example": "Doe"
                                                },
                                                "iin": {
                                                    "type": "string",
                                                    "example": "123456789012"
                                                },
                                                "is_visible": {
                                                    "type": "integer",
                                                    "enum": [
                                                        1,
                                                        0
                                                    ],
                                                    "example": 1
                                                },
                                                "photo_url": {
                                                    "type": "string",
                                                    "example": "/storage/photos/abc123.jpg"
                                                },
                                                "role": {
                                                    "type": "string",
                                                    "example": "user"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation error"
                    }
                }
            }
        },
        "/api/verify-account": {
            "post": {
                "tags": [
                    "Auth"
                ],
                "summary": "Верификация аккаунта по телефону и коду",
                "description": "Проверяет код верификации и отмечает аккаунт как верифицированный, если код корректен.",
                "operationId": "verifyAccount",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "phone",
                                    "verification_code"
                                ],
                                "properties": {
                                    "phone": {
                                        "description": "Номер телефона пользователя",
                                        "type": "string",
                                        "example": "+1234567890"
                                    },
                                    "verification_code": {
                                        "description": "Код верификации, отправленный на телефон",
                                        "type": "integer",
                                        "example": 123456
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Аккаунт успешно верифицирован",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Account verified successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Ошибка валидации или неверный код",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Invalid verification code or phone number"
                                        },
                                        "errors": {
                                            "type": "object",
                                            "nullable": true
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервера",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Server error"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/verify-code": {
            "post": {
                "tags": [
                    "Auth"
                ],
                "summary": "Отправка кода для сброса пароля",
                "description": "Отправляет код на указанный номер телефона, если номер зарегистрирован в системе.",
                "operationId": "604bf913373b6375caedd22883a79366",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "phone"
                                ],
                                "properties": {
                                    "phone": {
                                        "description": "Номер телефона пользователя в формате 7XXXXXXXXXX",
                                        "type": "string",
                                        "example": "77473186847"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Код для сброса пароля успешно отправлен",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Код для сброса пароля отправлен на ваш номер телефона."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Ошибка валидации или отсутствует зарегистрированный номер",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "Invalid phone number or user not found."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Ошибка сервера",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Не удалось отправить код для сброса пароля."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/login": {
            "post": {
                "tags": [
                    "Auth"
                ],
                "summary": "User login",
                "description": "Authenticate user and provide a token",
                "operationId": "loginUser",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "phone"
                                ],
                                "properties": {
                                    "phone": {
                                        "type": "string",
                                        "format": "",
                                        "example": "+1234567890"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Login successful",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "token": {
                                            "type": "string",
                                            "example": "abc123token"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "errors": {
                                            "type": "object",
                                            "example": []
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/logout": {
            "post": {
                "tags": [
                    "Auth"
                ],
                "summary": "User logout",
                "description": "Logs out the authenticated user and deletes their current access token",
                "operationId": "logoutUser",
                "responses": {
                    "200": {
                        "description": "Logout successful",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Logged out successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/cities": {
            "get": {
                "tags": [
                    "Cities"
                ],
                "summary": "Get list of cities",
                "description": "Returns a list of all cities.",
                "operationId": "185d0aefb5fd6e9d4e5f1263e2734df4",
                "responses": {
                    "200": {
                        "description": "Successful operation"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Cities"
                ],
                "summary": "Create a new city",
                "description": "Adds a new city to the database",
                "operationId": "2c088ea7c660d40e5d092a82ee72e2eb",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "name",
                                    "country_id"
                                ],
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "example": "Almaty"
                                    },
                                    "country_id": {
                                        "type": "integer",
                                        "example": 1
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "City created"
                    },
                    "400": {
                        "description": "Bad request"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/cities/{id}": {
            "get": {
                "tags": [
                    "Cities"
                ],
                "summary": "Get a city by ID",
                "description": "Returns a single city",
                "operationId": "87b6e2f2af6fbfa74374d2f9e3512d76",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of city to retrieve",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "City found"
                    },
                    "404": {
                        "description": "City not found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "Cities"
                ],
                "summary": "Update an existing city",
                "description": "Updates city details by ID",
                "operationId": "f7f6f540808f4308195e750cfb3849f8",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of city to update",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "example": "Astana"
                                    },
                                    "country_id": {
                                        "type": "integer",
                                        "example": 1
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "City updated"
                    },
                    "404": {
                        "description": "City not found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Cities"
                ],
                "summary": "Delete a city",
                "description": "Deletes a city by ID",
                "operationId": "0dc95dd0bc4da8cabcb3ebd5b105a59b",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of city to delete",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "City deleted"
                    },
                    "404": {
                        "description": "City not found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/company_types": {
            "get": {
                "tags": [
                    "Company Types"
                ],
                "summary": "Get list of company types",
                "description": "Returns a list of all company types.",
                "operationId": "b6e2effe47dd113641dcd8e6b47a5369",
                "responses": {
                    "200": {
                        "description": "Successful operation"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Company Types"
                ],
                "summary": "Create a new company type",
                "description": "Adds a new company type to the database",
                "operationId": "ca221c56b20e630be02458badac80e8e",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "name"
                                ],
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "example": "LLC"
                                    },
                                    "description": {
                                        "type": "string",
                                        "example": "Limited Liability Company"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Company type created"
                    },
                    "400": {
                        "description": "Bad request"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/company_types/{id}": {
            "get": {
                "tags": [
                    "Company Types"
                ],
                "summary": "Get a company type by ID",
                "description": "Returns a single company type",
                "operationId": "c0932c075d84dfe6ab4e9c9099a38f63",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of company type to retrieve",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Company type found"
                    },
                    "404": {
                        "description": "Company type not found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "Company Types"
                ],
                "summary": "Update an existing company type",
                "description": "Updates company type details by ID",
                "operationId": "952738e3502bc7d27128575541d9ece3",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of company type to update",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "example": "Corp"
                                    },
                                    "description": {
                                        "type": "string",
                                        "example": "Corporation"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Company type updated"
                    },
                    "404": {
                        "description": "Company type not found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Company Types"
                ],
                "summary": "Delete a company type",
                "description": "Deletes a company type by ID",
                "operationId": "47d2283328615b238319b8df6a8ed91b",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of company type to delete",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Company type deleted"
                    },
                    "404": {
                        "description": "Company type not found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/countries": {
            "get": {
                "tags": [
                    "Countries"
                ],
                "summary": "Get list of countries",
                "description": "Returns a list of all countries.",
                "operationId": "bbb90b9e86a9cab92aaa448fe98954c9",
                "responses": {
                    "200": {
                        "description": "Successful operation"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Countries"
                ],
                "summary": "Create a new country",
                "description": "Adds a new country to the database",
                "operationId": "575eed1b82f384d950b5b4541e3f2c50",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "name",
                                    "code"
                                ],
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "example": "Kazakhstan"
                                    },
                                    "code": {
                                        "type": "string",
                                        "example": "KZ"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Country created"
                    },
                    "400": {
                        "description": "Bad request"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/countries/{id}": {
            "get": {
                "tags": [
                    "Countries"
                ],
                "summary": "Get a country by ID",
                "description": "Returns a single country",
                "operationId": "c172dfb1b3785a376f52b0f46f344f20",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of country to retrieve",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Country found"
                    },
                    "404": {
                        "description": "Country not found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "Countries"
                ],
                "summary": "Update an existing country",
                "description": "Updates country details by ID",
                "operationId": "0c6426c4d0dfc8c5a372bad4825a38bc",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of country to update",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "example": "Kazakhstan"
                                    },
                                    "code": {
                                        "type": "string",
                                        "example": "KZ"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Country updated"
                    },
                    "404": {
                        "description": "Country not found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Countries"
                ],
                "summary": "Delete a country",
                "description": "Deletes a country by ID",
                "operationId": "47110a2e95266d7e013ca957c8e9dbb3",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of country to delete",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Country deleted"
                    },
                    "404": {
                        "description": "Country not found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/default_answers/GetDefaultAnswersByVideoID": {
            "post": {
                "tags": [
                    "DefaultAnswers"
                ],
                "summary": "Get default answers by video ID",
                "operationId": "getDefaultAnswersByVideoID",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "video_id": {
                                        "description": "ID of the video",
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "user_id": {
                                        "description": "ID of the user (optional)",
                                        "type": "integer"
                                    },
                                    "survey_id": {
                                        "description": "ID of the survey",
                                        "type": "integer",
                                        "example": 1
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Survey with default answers fetched successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "id": {
                                            "type": "integer",
                                            "example": 1
                                        },
                                        "questions": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "id": {
                                                        "type": "integer"
                                                    },
                                                    "question_text": {
                                                        "type": "string"
                                                    },
                                                    "options": {
                                                        "type": "array",
                                                        "items": {
                                                            "properties": {
                                                                "id": {
                                                                    "type": "integer"
                                                                },
                                                                "option_text": {
                                                                    "type": "string"
                                                                }
                                                            },
                                                            "type": "object"
                                                        }
                                                    },
                                                    "custom_value": {
                                                        "type": "string"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Survey or video not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Survey not found"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/default_answers": {
            "get": {
                "tags": [
                    "DefaultAnswers"
                ],
                "summary": "Get a list of default answers",
                "description": "Returns a list of all default answers.",
                "operationId": "9c607486e7affb5accce1c1939b8f4ca",
                "responses": {
                    "200": {
                        "description": "Successful operation"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "DefaultAnswers"
                ],
                "summary": "Store answers with images",
                "operationId": "41143ce888f2fc2121adbd61930921cb",
                "requestBody": {
                    "required": true,
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "required": [
                                    "survey_id",
                                    "answers"
                                ],
                                "properties": {
                                    "survey_id": {
                                        "type": "integer",
                                        "example": "1"
                                    },
                                    "video_id": {
                                        "type": "integer",
                                        "example": "38"
                                    },
                                    "answers": {
                                        "type": "array",
                                        "items": {
                                            "required": [
                                                "question_id"
                                            ],
                                            "properties": {
                                                "question_id": {
                                                    "type": "integer"
                                                },
                                                "option_ids": {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "integer"
                                                    }
                                                },
                                                "custom_value": {
                                                    "type": "string"
                                                },
                                                "image_urls": {
                                                    "description": "List of image files",
                                                    "type": "array",
                                                    "items": {
                                                        "description": "Image file",
                                                        "type": "string",
                                                        "format": "binary",
                                                        "example": "image files"
                                                    }
                                                }
                                            },
                                            "type": "object"
                                        }
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Answers successfully saved",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Answers saved successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/default_answers/AddDefaultAnswersWithImages": {
            "post": {
                "tags": [
                    "DefaultAnswers"
                ],
                "summary": "Store answers with images",
                "operationId": "storeAnswersWithImages",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "survey_id",
                                    "answers"
                                ],
                                "properties": {
                                    "survey_id": {
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "video_id": {
                                        "type": "integer",
                                        "example": 107
                                    },
                                    "answers": {
                                        "description": "Array of answers",
                                        "type": "array",
                                        "items": {
                                            "required": [
                                                "question_id"
                                            ],
                                            "properties": {
                                                "question_id": {
                                                    "type": "integer",
                                                    "example": 2
                                                },
                                                "option_ids": {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "integer"
                                                    },
                                                    "example": [
                                                        2
                                                    ]
                                                },
                                                "custom_value": {
                                                    "type": "string",
                                                    "example": "string"
                                                },
                                                "image_urls": {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "string"
                                                    },
                                                    "example": [
                                                        "storage/user_answers/images/xfrNqETCemFCWUjMiLSkfamrQmBqVuRyMKfeRsG9.png"
                                                    ]
                                                }
                                            },
                                            "type": "object"
                                        }
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Answers successfully saved",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Answers saved successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/default_answers/{id}": {
            "get": {
                "tags": [
                    "DefaultAnswers"
                ],
                "summary": "Get a default answer by ID",
                "description": "Returns a single default answer",
                "operationId": "4444bd0ae609d3c6d2396a288bd5c16e",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the default answer",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation"
                    },
                    "404": {
                        "description": "Default answer not found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "DefaultAnswers"
                ],
                "summary": "Update default answers",
                "description": "Updates existing default answers for a given survey and video",
                "operationId": "7afd7958bef24432f711312d6f592863",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the DefaultSurvey to be updated",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "survey_id",
                                    "answers"
                                ],
                                "properties": {
                                    "survey_id": {
                                        "description": "ID of the related survey",
                                        "type": "integer",
                                        "example": "1"
                                    },
                                    "video_id": {
                                        "description": "ID of the related video",
                                        "type": "integer",
                                        "nullable": true
                                    },
                                    "answers": {
                                        "description": "Array of answers to be updated",
                                        "type": "array",
                                        "items": {
                                            "required": [
                                                "question_id"
                                            ],
                                            "properties": {
                                                "question_id": {
                                                    "description": "ID of the related question",
                                                    "type": "integer"
                                                },
                                                "option_ids": {
                                                    "description": "Array of selected option IDs",
                                                    "type": "array",
                                                    "items": {
                                                        "type": "integer"
                                                    },
                                                    "nullable": true
                                                },
                                                "custom_value": {
                                                    "description": "Custom answer value (if any)",
                                                    "type": "string",
                                                    "nullable": true
                                                },
                                                "image_urls": {
                                                    "description": "Array of image files (optional)",
                                                    "type": "array",
                                                    "items": {
                                                        "type": "string",
                                                        "format": "binary"
                                                    },
                                                    "nullable": true
                                                }
                                            },
                                            "type": "object"
                                        }
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Default answers updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Survey and answers updated successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "DefaultSurvey not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "DefaultSurvey not found"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request due to validation errors or incorrect data",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "errors": {
                                            "type": "object",
                                            "example": {
                                                "survey_id": [
                                                    "The survey_id field is required."
                                                ]
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "DefaultAnswers"
                ],
                "summary": "Delete a default answer",
                "description": "Deletes a default answer by ID",
                "operationId": "227bcf1371dd33ff41c375dc7b322d30",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the default answer to delete",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Default answer deleted successfully"
                    },
                    "404": {
                        "description": "Default answer not found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/favorites": {
            "get": {
                "tags": [
                    "Favorites"
                ],
                "summary": "Get a list of favorites",
                "description": "Returns a list of all favorite items for the authenticated user.",
                "operationId": "bc433e786ab5a0bec81c53c578e0b6aa",
                "responses": {
                    "200": {
                        "description": "Successful operation"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Favorites"
                ],
                "summary": "Add a favorite item",
                "description": "Adds a new item to the user's favorites list",
                "operationId": "d426a8b38354581cb4082ac4bc62e22f",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "video_id"
                                ],
                                "properties": {
                                    "video_id": {
                                        "description": "ID of the item to favorite",
                                        "type": "integer"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Favorite item created"
                    },
                    "400": {
                        "description": "Bad request"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/favorites/{id}": {
            "delete": {
                "tags": [
                    "Favorites"
                ],
                "summary": "Remove a favorite item",
                "description": "Removes an item from the user's favorites list",
                "operationId": "397d5ad2363742284a8d87c5dc366148",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the favorite item to remove",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Favorite item deleted"
                    },
                    "404": {
                        "description": "Favorite item not found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/files": {
            "get": {
                "tags": [
                    "Files"
                ],
                "summary": "Get a list of files",
                "description": "Returns a list of all file items for the authenticated user.",
                "operationId": "75e11bf0f02914a731190e29ffdfa4da",
                "responses": {
                    "200": {
                        "description": "Successful operation"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Files"
                ],
                "summary": "Add a file item",
                "description": "Adds a new item to the user's files list",
                "operationId": "504365db63af2bed79d990a37f967c90",
                "requestBody": {
                    "required": true,
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "required": [
                                    "name",
                                    "file"
                                ],
                                "properties": {
                                    "name": {
                                        "description": "Name of the file",
                                        "type": "string"
                                    },
                                    "file": {
                                        "description": "File to upload",
                                        "type": "string",
                                        "format": "binary"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "File item created"
                    },
                    "400": {
                        "description": "Bad request"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/files/{id}": {
            "get": {
                "tags": [
                    "Files"
                ],
                "summary": "Get a file item",
                "description": "Retrieve details of a file item by its ID",
                "operationId": "ef2a0ed6c4ec586c21d478ebd795ef39",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the file to retrieve",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "File item retrieved",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "id": {
                                            "description": "File ID",
                                            "type": "integer"
                                        },
                                        "name": {
                                            "description": "File name",
                                            "type": "string"
                                        },
                                        "path": {
                                            "description": "Path to the file",
                                            "type": "string"
                                        },
                                        "created_at": {
                                            "description": "Creation timestamp",
                                            "type": "string",
                                            "format": "date-time"
                                        },
                                        "updated_at": {
                                            "description": "Last update timestamp",
                                            "type": "string",
                                            "format": "date-time"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "File not found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Files"
                ],
                "summary": "Update a file item with _method=PUT",
                "description": "Updates the details of a file item by its ID using POST method with _method=PUT",
                "operationId": "702e8ab4ba984019d1246b0c2bf5ee29",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the file to update",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "required": [
                                    "_method",
                                    "name",
                                    "file"
                                ],
                                "properties": {
                                    "_method": {
                                        "description": "HTTP method override (PUT)",
                                        "type": "string",
                                        "example": "PUT"
                                    },
                                    "name": {
                                        "description": "Updated name of the file",
                                        "type": "string"
                                    },
                                    "file": {
                                        "description": "Updated file",
                                        "type": "string",
                                        "format": "binary"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "File item updated"
                    },
                    "404": {
                        "description": "File not found"
                    },
                    "400": {
                        "description": "Bad request"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Files"
                ],
                "summary": "Delete a file item",
                "description": "Deletes a file item by its ID",
                "operationId": "486fb3f545cf239f9d2230b5bde6f3f4",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the file to delete",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "File item deleted"
                    },
                    "404": {
                        "description": "File not found"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/likes": {
            "get": {
                "tags": [
                    "Likes"
                ],
                "summary": "Get a list of likes",
                "description": "Returns a list of all like items for the authenticated user.",
                "operationId": "8126380dee54ff840c069abb47c2c5f6",
                "responses": {
                    "200": {
                        "description": "Successful operation"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Likes"
                ],
                "summary": "Add a like item",
                "description": "Adds a new item to the user's likes list",
                "operationId": "4f47d4a17ebf2fe7bf4976dac452330d",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "video_id"
                                ],
                                "properties": {
                                    "video_id": {
                                        "description": "ID of the video to like",
                                        "type": "integer"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "like item created"
                    },
                    "400": {
                        "description": "Bad request"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/likes/{id}": {
            "delete": {
                "tags": [
                    "Likes"
                ],
                "summary": "Remove a like item",
                "description": "Removes an item from the user's likes list",
                "operationId": "2d5986df0b81b2bbb2a23b691734f306",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the like item to remove",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "like item deleted"
                    },
                    "404": {
                        "description": "like item not found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/options": {
            "get": {
                "tags": [
                    "Options"
                ],
                "summary": "Options",
                "description": "Options",
                "operationId": "fcd84b44c04ba391a890ffbb0f38b718",
                "responses": {
                    "200": {
                        "description": "Successful operation"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Options"
                ],
                "summary": "Create a new option",
                "description": "Adds a new option to the database",
                "operationId": "48f1e966c69b50ccd2e617d3f180cab6",
                "requestBody": {
                    "required": true,
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "required": [
                                    "question_id",
                                    "option_text"
                                ],
                                "properties": {
                                    "question_id": {
                                        "description": "ID вопроса, к которому относится этот вариант",
                                        "type": "integer",
                                        "example": "1"
                                    },
                                    "option_text": {
                                        "description": "Текст варианта ответа",
                                        "type": "string",
                                        "example": "Sample Option Text"
                                    },
                                    "comment": {
                                        "description": "Коммент",
                                        "type": "string",
                                        "example": "Sample Option Text"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Option created"
                    },
                    "400": {
                        "description": "Bad request"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/options/{id}": {
            "get": {
                "tags": [
                    "Options"
                ],
                "summary": "Get an option by ID",
                "description": "Returns a single option",
                "operationId": "2b950496ea6ffdf28c7b0e0d8bbe2506",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the option",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation"
                    },
                    "404": {
                        "description": "Option not found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "Options"
                ],
                "summary": "Update an option",
                "description": "Updates an existing option",
                "operationId": "931c0781f6da28125256a53e15402d68",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the option to update",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "question_id": {
                                        "description": "ID of the question the option belongs to",
                                        "type": "integer"
                                    },
                                    "option_text": {
                                        "description": "Text of the option",
                                        "type": "string"
                                    },
                                    "comment": {
                                        "description": "",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Option updated successfully"
                    },
                    "404": {
                        "description": "Option not found"
                    },
                    "400": {
                        "description": "Bad request"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Options"
                ],
                "summary": "Delete an option",
                "description": "Deletes an option by ID",
                "operationId": "5fe5fd392ef4cc7e1319af0cbe6d09ff",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the option to delete",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Option deleted successfully"
                    },
                    "404": {
                        "description": "Option not found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/orders/quick_order/response/{order_id}": {
            "post": {
                "tags": [
                    "Quick Orders"
                ],
                "summary": "Respond to a quick order",
                "description": "Updates the selected order status to 14 and others with the same quick_order_id to 13.",
                "operationId": "7ee445d5b3d3a56a11566503da0893bd",
                "parameters": [
                    {
                        "name": "order_id",
                        "in": "path",
                        "description": "ID of the selected order",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Response submitted, order updated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Response submitted, order updated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/orders/quick_order/{user_survey_id}": {
            "post": {
                "tags": [
                    "Quick Orders"
                ],
                "summary": "Create a quick order",
                "description": "Creates a quick order and assigns it to masters.",
                "operationId": "a648344ee9a6c639f1d3dbe38e4225d1",
                "parameters": [
                    {
                        "name": "user_survey_id",
                        "in": "path",
                        "description": "Optional survey ID",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Quick order created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Quick order created and sent to masters."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/orders/GetOrderByMasterID/{id}": {
            "get": {
                "tags": [
                    "Orders"
                ],
                "summary": "Get an order by master ID",
                "description": "Returns a single order",
                "operationId": "6e645358216607e78457f0700a654589",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the order to retrieve",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Order found"
                    },
                    "404": {
                        "description": "Order not found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/orders/GetOrderByUserID/{id}": {
            "get": {
                "tags": [
                    "Orders"
                ],
                "summary": "Get an order by master ID",
                "description": "Returns a single order",
                "operationId": "d323c85f8079079e862483f9a63ec77b",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the order to retrieve",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Order found"
                    },
                    "404": {
                        "description": "Order not found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/orders": {
            "get": {
                "tags": [
                    "Orders"
                ],
                "summary": "Get a list of orders",
                "description": "Returns a list of all orders, with optional filtering by status_id.",
                "operationId": "955bb77a45ae173a485fadb8befed93f",
                "parameters": [
                    {
                        "name": "status_id",
                        "in": "query",
                        "description": "Filter orders by one or multiple status_id (comma-separated values, e.g., 1,2,3)",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "example": "1,2,3"
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid status_id provided"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Orders"
                ],
                "summary": "Create a new order",
                "description": "Adds a new order to the database",
                "operationId": "2123ba58dadb22bd6f2c8081af562230",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "user_id",
                                    "user_survey_id",
                                    "master_id",
                                    "video_id",
                                    "master_price",
                                    "master_time",
                                    "status_id"
                                ],
                                "properties": {
                                    "user_survey_id": {
                                        "description": "ID of the user survey",
                                        "type": "integer"
                                    },
                                    "user_id": {
                                        "description": "ID of the user (customer)",
                                        "type": "integer"
                                    },
                                    "master_id": {
                                        "description": "ID of the master (user)",
                                        "type": "integer"
                                    },
                                    "video_id": {
                                        "description": "ID of the video",
                                        "type": "integer"
                                    },
                                    "master_price": {
                                        "description": "Price charged by the master",
                                        "type": "string"
                                    },
                                    "master_time": {
                                        "description": "Time related to the order (in minutes)",
                                        "type": "string"
                                    },
                                    "status_id": {
                                        "description": "ID of the order status",
                                        "type": "integer"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Order created"
                    },
                    "400": {
                        "description": "Bad request"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/orders/{id}": {
            "get": {
                "tags": [
                    "Orders"
                ],
                "summary": "Get an order by ID",
                "description": "Returns a single order",
                "operationId": "88d27387b1e409e075c18609d4a0c300",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the order to retrieve",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Order found"
                    },
                    "404": {
                        "description": "Order not found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "Orders"
                ],
                "summary": "Update an existing order",
                "description": "Updates order details by ID",
                "operationId": "38a1b85e8294795a1b0dc438a36e319f",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the order to update",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "status": {
                                        "description": "Updated status ID (1 or 0)",
                                        "type": "integer"
                                    },
                                    "master_price": {
                                        "description": "Updated master price",
                                        "type": "number",
                                        "format": "float"
                                    },
                                    "master_time": {
                                        "description": "Updated master time",
                                        "type": "integer"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Order updated"
                    },
                    "404": {
                        "description": "Order not found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Orders"
                ],
                "summary": "Delete an order",
                "description": "Deletes an order by ID",
                "operationId": "bab875a1ed962fb33565ab9b48c0d494",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the order to delete",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Order deleted"
                    },
                    "404": {
                        "description": "Order not found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/quick_orders/{quick_order_id}": {
            "get": {
                "tags": [
                    "Orders"
                ],
                "summary": "Get an quick_order by ID",
                "description": "Returns a single quick_order",
                "operationId": "56e6aae1ad2f3d2c5a34330f8b56e0f6",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the quick_order to retrieve",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "quick_order found"
                    },
                    "404": {
                        "description": "quick_order not found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/quick_orders": {
            "post": {
                "tags": [
                    "Orders"
                ],
                "summary": "Create a new quick_order",
                "description": "Adds a new quick_order to the database",
                "operationId": "51686bd9cc50f271f9f0ac078a137c80",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "user_id",
                                    "user_survey_id",
                                    "master_id",
                                    "video_id",
                                    "master_price",
                                    "master_time",
                                    "status_id"
                                ],
                                "properties": {
                                    "user_survey_id": {
                                        "description": "ID of the user survey",
                                        "type": "integer"
                                    },
                                    "user_id": {
                                        "description": "ID of the user (customer)",
                                        "type": "integer"
                                    },
                                    "master_id": {
                                        "description": "ID of the master (user)",
                                        "type": "integer"
                                    },
                                    "video_id": {
                                        "description": "ID of the video",
                                        "type": "integer"
                                    },
                                    "master_price": {
                                        "description": "Price charged by the master",
                                        "type": "string"
                                    },
                                    "master_time": {
                                        "description": "Time related to the order (in minutes)",
                                        "type": "string"
                                    },
                                    "status_id": {
                                        "description": "ID of the order status",
                                        "type": "integer"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Order created"
                    },
                    "400": {
                        "description": "Bad request"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/quick_orders/{id}": {
            "delete": {
                "tags": [
                    "Orders"
                ],
                "summary": "Delete an quick_orders",
                "description": "Deletes an quick_orders by ID",
                "operationId": "0fb8358a56f82f353f8198cb32ad9e0b",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the quick_orders to delete",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "quick_orders deleted"
                    },
                    "404": {
                        "description": "quick_orders not found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/order_reports": {
            "get": {
                "tags": [
                    "Order Reports"
                ],
                "summary": "Get all order reports",
                "description": "Retrieve a list of all order reports.",
                "operationId": "f12b2d5e41be7d6fa3b2f703fda196a2",
                "responses": {
                    "200": {
                        "description": "List of order reports"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Order Reports"
                ],
                "summary": "Create a new order report with photos",
                "description": "Uploads photos to the server, saves their URLs, and creates a report associated with an order.",
                "operationId": "35a6633367862f2efc684768f2bd521b",
                "requestBody": {
                    "required": true,
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "required": [
                                    "order_id",
                                    "photos"
                                ],
                                "properties": {
                                    "order_id": {
                                        "description": "ID of the associated order",
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "photos[]": {
                                        "description": "Array of photo files to upload",
                                        "type": "array",
                                        "items": {
                                            "description": "Photo file (jpeg, png, jpg, gif)",
                                            "type": "string",
                                            "format": "binary"
                                        }
                                    },
                                    "description": {
                                        "description": "Optional description for the report",
                                        "type": "string",
                                        "example": "This is a sample report description."
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Report created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Report created successfully."
                                        },
                                        "report": {
                                            "properties": {
                                                "id": {
                                                    "type": "integer",
                                                    "example": 1
                                                },
                                                "order_id": {
                                                    "type": "integer",
                                                    "example": 1
                                                },
                                                "photo_urls": {
                                                    "description": "Array of uploaded photo URLs",
                                                    "type": "array",
                                                    "items": {
                                                        "type": "string",
                                                        "example": "http://example.com/storage/photos/photo1.jpg"
                                                    }
                                                },
                                                "description": {
                                                    "type": "string",
                                                    "example": "This is a sample report description."
                                                },
                                                "created_at": {
                                                    "type": "string",
                                                    "format": "datetime",
                                                    "example": "2024-12-01T12:00:00Z"
                                                },
                                                "updated_at": {
                                                    "type": "string",
                                                    "format": "datetime",
                                                    "example": "2024-12-01T12:00:00Z"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "The given data was invalid."
                                        },
                                        "errors": {
                                            "type": "object",
                                            "additionalProperties": [
                                                {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "string"
                                                    },
                                                    "property": null
                                                }
                                            ]
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/order_reports/{id}": {
            "get": {
                "tags": [
                    "Order Reports"
                ],
                "summary": "Get a specific order report",
                "description": "Retrieve a specific order report by its ID.",
                "operationId": "d121c919b2990dccee9f14e2173a54dd",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Order report ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Order report details"
                    },
                    "404": {
                        "description": "Order report not found"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Order Reports"
                ],
                "summary": "Update an order report with new photos",
                "description": "Uploads new photos to the server, deletes old photos, and updates the report with the new photo URLs. This is a POST request with _method=PUT.",
                "operationId": "03f2ae8c9d85b0b172ed7dbe421db016",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the report to update",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "example": 1
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "required": [
                                    "photo_urls"
                                ],
                                "properties": {
                                    "photo_urls": {
                                        "description": "Array of new photo files to upload",
                                        "type": "array",
                                        "items": {
                                            "description": "Photo file (jpeg, png, jpg, gif)",
                                            "type": "string",
                                            "format": "binary"
                                        }
                                    },
                                    "description": {
                                        "description": "Optional description for the report",
                                        "type": "string",
                                        "example": "Updated report description."
                                    },
                                    "_method": {
                                        "description": "Override the HTTP method to PUT",
                                        "type": "string",
                                        "example": "PUT"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Report updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Report updated successfully."
                                        },
                                        "report": {
                                            "properties": {
                                                "id": {
                                                    "type": "integer",
                                                    "example": 1
                                                },
                                                "order_id": {
                                                    "type": "integer",
                                                    "example": 1
                                                },
                                                "photo_urls": {
                                                    "description": "Array of uploaded photo URLs",
                                                    "type": "array",
                                                    "items": {
                                                        "type": "string",
                                                        "example": "http://example.com/storage/photos/photo1.jpg"
                                                    }
                                                },
                                                "description": {
                                                    "type": "string",
                                                    "example": "Updated report description."
                                                },
                                                "created_at": {
                                                    "type": "string",
                                                    "format": "datetime",
                                                    "example": "2024-12-01T12:00:00Z"
                                                },
                                                "updated_at": {
                                                    "type": "string",
                                                    "format": "datetime",
                                                    "example": "2024-12-01T12:00:00Z"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "The given data was invalid."
                                        },
                                        "errors": {
                                            "type": "object",
                                            "additionalProperties": [
                                                {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "string"
                                                    },
                                                    "property": null
                                                }
                                            ]
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Order Reports"
                ],
                "summary": "Delete an order report",
                "description": "Remove an existing order report by its ID.",
                "operationId": "f98791993ed387e5b315be2cc7d7f0a2",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Order report ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Report deleted successfully"
                    },
                    "404": {
                        "description": "Order report not found"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/order_statuses": {
            "get": {
                "tags": [
                    "Order Statuses"
                ],
                "summary": "Get a list of order statuses",
                "description": "Returns a list of all order statuses.",
                "operationId": "9d34755ad5ff91cc8f616d66af4ee018",
                "responses": {
                    "200": {
                        "description": "Successful operation"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Order Statuses"
                ],
                "summary": "Create a new order status",
                "description": "Adds a new order status to the database",
                "operationId": "239001aaac78c755ff48504091b1b479",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "name_for_user",
                                    "name_for_master"
                                ],
                                "properties": {
                                    "name_for_user": {
                                        "description": "Name of the order status",
                                        "type": "string",
                                        "example": "Pending"
                                    },
                                    "name_for_master": {
                                        "description": "Name of the order status",
                                        "type": "string",
                                        "example": "Pending"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Order status created"
                    },
                    "400": {
                        "description": "Bad request"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/order_statuses/{id}": {
            "get": {
                "tags": [
                    "Order Statuses"
                ],
                "summary": "Get an order status by ID",
                "description": "Returns a single order status",
                "operationId": "056cdb05b47eb79423465f36ab981b1f",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the order status to retrieve",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Order status found"
                    },
                    "404": {
                        "description": "Order status not found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "Order Statuses"
                ],
                "summary": "Update an existing order status",
                "description": "Updates order status details by ID",
                "operationId": "173ba2176b5f136612e1395ec11da8ac",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the order status to update",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "name_for_user",
                                    "name_for_master"
                                ],
                                "properties": {
                                    "name_for_user": {
                                        "description": "Updated name of the order status",
                                        "type": "string",
                                        "example": "Shipped"
                                    },
                                    "name_for_master": {
                                        "description": "Updated name of the order status",
                                        "type": "string",
                                        "example": "Shipped"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Order status updated"
                    },
                    "404": {
                        "description": "Order status not found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Order Statuses"
                ],
                "summary": "Delete an order status",
                "description": "Deletes an order status by ID",
                "operationId": "fed1ea57c0ffa89c24d69fc28ac8b3c0",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the order status to delete",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Order status deleted"
                    },
                    "404": {
                        "description": "Order status not found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/payments": {
            "get": {
                "tags": [
                    "Payments"
                ],
                "summary": "Get a list of payments",
                "description": "Returns a list of all payments.",
                "operationId": "afcbc19a07bf33c2fcb73b5c438b476c",
                "responses": {
                    "200": {
                        "description": "Successful operation"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Payments"
                ],
                "summary": "Create a new payment",
                "description": "Adds a new payment to the database with an uploaded PDF file",
                "operationId": "985b848b4cb6ca6115cf4ea71e314c0c",
                "requestBody": {
                    "required": true,
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "required": [
                                    "amount",
                                    "user_id",
                                    "payment_status_id",
                                    "file"
                                ],
                                "properties": {
                                    "amount": {
                                        "type": "number",
                                        "format": "float",
                                        "example": 100.5
                                    },
                                    "user_id": {
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "payment_status_id": {
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "file": {
                                        "description": "PDF document to upload",
                                        "type": "string",
                                        "format": "binary"
                                    },
                                    "description": {
                                        "type": "string",
                                        "example": "Payment for services"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Payment created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "id": {
                                            "type": "integer",
                                            "example": 1
                                        },
                                        "user_id": {
                                            "type": "integer",
                                            "example": 1
                                        },
                                        "amount": {
                                            "type": "number",
                                            "format": "float",
                                            "example": 100.5
                                        },
                                        "status_id": {
                                            "type": "integer",
                                            "example": 1
                                        },
                                        "check_url": {
                                            "type": "string",
                                            "example": "http://example.com/storage/payments/document.pdf"
                                        },
                                        "description": {
                                            "type": "string",
                                            "example": "Payment for services"
                                        },
                                        "created_at": {
                                            "type": "string",
                                            "format": "datetime",
                                            "example": "2024-12-05T10:00:00Z"
                                        },
                                        "updated_at": {
                                            "type": "string",
                                            "format": "datetime",
                                            "example": "2024-12-05T10:00:00Z"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/payments/{id}": {
            "get": {
                "tags": [
                    "Payments"
                ],
                "summary": "Get a payment by ID",
                "description": "Returns a single payment",
                "operationId": "33da95d13a42b4c3898427d7cb9516a8",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of payment to retrieve",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Payment found"
                    },
                    "404": {
                        "description": "Payment not found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Payments"
                ],
                "summary": "Update an existing payment (simulated PUT via POST)",
                "description": "Updates payment details by ID using POST with a hidden _method parameter",
                "operationId": "e641e0ddd9324029f55aa1ef4d06cd18",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of payment to update",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "required": [
                                    "_method"
                                ],
                                "properties": {
                                    "_method": {
                                        "description": "Hidden field to simulate PUT method",
                                        "type": "string",
                                        "example": "PUT"
                                    },
                                    "amount": {
                                        "type": "number",
                                        "format": "float",
                                        "example": 150.75
                                    },
                                    "user_id": {
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "payment_status_id": {
                                        "type": "integer",
                                        "example": 2
                                    },
                                    "description": {
                                        "type": "string",
                                        "example": "Updated payment description"
                                    },
                                    "file": {
                                        "description": "Optional PDF document to replace the existing one",
                                        "type": "string",
                                        "format": "binary"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Payment updated"
                    },
                    "404": {
                        "description": "Payment not found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Payments"
                ],
                "summary": "Delete a payment",
                "description": "Deletes a payment by ID",
                "operationId": "4db359e13e73e2832ead474820546c40",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of payment to delete",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Payment deleted"
                    },
                    "404": {
                        "description": "Payment not found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/payment_statuses": {
            "get": {
                "tags": [
                    "Payment Statuses"
                ],
                "summary": "Get a list of payment statuses",
                "description": "Returns a list of all payment statuses.",
                "operationId": "193b9c542b9e69fc0173455a67df314f",
                "responses": {
                    "200": {
                        "description": "Successful operation"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Payment Statuses"
                ],
                "summary": "Create a new payment status",
                "description": "Adds a new payment status to the database",
                "operationId": "cb7ff73b78747bac12aced98b6e20a3a",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "name"
                                ],
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "example": "Paid"
                                    },
                                    "description": {
                                        "type": "string",
                                        "example": "Payment has been completed"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Payment status created"
                    },
                    "400": {
                        "description": "Bad request"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/payment_statuses/{id}": {
            "get": {
                "tags": [
                    "Payment Statuses"
                ],
                "summary": "Get a payment status by ID",
                "description": "Returns a single payment status",
                "operationId": "f4a68ce9df5bd58381c8ea3f6c863928",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of payment status to retrieve",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Payment status found"
                    },
                    "404": {
                        "description": "Payment status not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "Payment Statuses"
                ],
                "summary": "Update an existing payment status",
                "description": "Updates payment status details by ID",
                "operationId": "734e42156b88536469cb0fc865e9cf51",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of payment status to update",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "example": "Paid Updated"
                                    },
                                    "description": {
                                        "type": "string",
                                        "example": "Payment has been completed and verified"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Payment status updated"
                    },
                    "404": {
                        "description": "Payment status not found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Payment Statuses"
                ],
                "summary": "Delete a payment status",
                "description": "Deletes a payment status by ID",
                "operationId": "1f981c8493ccb555de2c27b499251b2f",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of payment status to delete",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Payment status deleted"
                    },
                    "404": {
                        "description": "Payment status not found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/questions": {
            "get": {
                "tags": [
                    "Questions"
                ],
                "summary": "Get a list of questions",
                "description": "Returns a list of all questions.",
                "operationId": "860331f8e4b6d740293483a82e52fc5a",
                "responses": {
                    "200": {
                        "description": "Successful operation"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Questions"
                ],
                "summary": "Create a new question",
                "description": "Creates a new question",
                "operationId": "5b8990f331654a60cfd5e3914d7e07a3",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "survey_id",
                                    "text"
                                ],
                                "properties": {
                                    "survey_id": {
                                        "description": "ID of the survey the question belongs to",
                                        "type": "integer"
                                    },
                                    "text": {
                                        "description": "Text of the question",
                                        "type": "string"
                                    },
                                    "type_id": {
                                        "description": "Type of the question (e.g., text, multiple choice)",
                                        "type": "integer"
                                    },
                                    "comment": {
                                        "description": "",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Question created successfully"
                    },
                    "400": {
                        "description": "Bad request"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/questions/{id}": {
            "get": {
                "tags": [
                    "Questions"
                ],
                "summary": "Get a question by ID",
                "description": "Returns a single question",
                "operationId": "fb7e0422bc357dd72ecfaa07729c41c1",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the question",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation"
                    },
                    "404": {
                        "description": "Question not found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "Questions"
                ],
                "summary": "Update a question",
                "description": "Updates an existing question",
                "operationId": "f07ecaa8b2a907cc3231481f1a06b704",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the question to update",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "survey_id": {
                                        "description": "ID of the survey the question belongs to",
                                        "type": "integer"
                                    },
                                    "text": {
                                        "description": "Text of the question",
                                        "type": "string"
                                    },
                                    "type_id": {
                                        "description": "Type of the question (e.g., text, multiple choice)",
                                        "type": "integer"
                                    },
                                    "comment": {
                                        "description": "",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Question updated successfully"
                    },
                    "404": {
                        "description": "Question not found"
                    },
                    "400": {
                        "description": "Bad request"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Questions"
                ],
                "summary": "Delete a question",
                "description": "Deletes a question by ID",
                "operationId": "2cde4cbb83a9fc1d3660444e77750195",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the question to delete",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Question deleted successfully"
                    },
                    "404": {
                        "description": "Question not found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/question_types": {
            "get": {
                "tags": [
                    "Question Types"
                ],
                "summary": "Get a list of question types",
                "description": "Returns a list of all question types.",
                "operationId": "05d1bb59d0f80f2d0ce336548039cb76",
                "responses": {
                    "200": {
                        "description": "Successful operation"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Question Types"
                ],
                "summary": "Create a new question type",
                "description": "Creates a new question type",
                "operationId": "3292acabe5957a1474be66a9f54ba192",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "name"
                                ],
                                "properties": {
                                    "name": {
                                        "description": "Name of the question type",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Question type created successfully"
                    },
                    "400": {
                        "description": "Bad request"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/question_types/{id}": {
            "get": {
                "tags": [
                    "Question Types"
                ],
                "summary": "Get a question type by ID",
                "description": "Returns a single question type",
                "operationId": "84ebcb7a192e193f9ca49c8efaf60743",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the question type",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation"
                    },
                    "404": {
                        "description": "Question type not found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "Question Types"
                ],
                "summary": "Update a question type",
                "description": "Updates an existing question type",
                "operationId": "3f71aa6b81709e4faa28597f8649d642",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the question type to update",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "name": {
                                        "description": "Name of the question type",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Question type updated successfully"
                    },
                    "404": {
                        "description": "Question type not found"
                    },
                    "400": {
                        "description": "Bad request"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Question Types"
                ],
                "summary": "Delete a question type",
                "description": "Deletes a question type by ID",
                "operationId": "89e2a86db067caac3d1c1f7dfbab5a72",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the question type to delete",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Question type deleted successfully"
                    },
                    "404": {
                        "description": "Question type not found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/ratings": {
            "get": {
                "tags": [
                    "Ratings"
                ],
                "summary": "Get a list of ratings",
                "description": "Returns a list of all ratings.",
                "operationId": "b24d88aeea102065c5a101d3d1ff06d5",
                "responses": {
                    "200": {
                        "description": "Successful operation"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Ratings"
                ],
                "summary": "Create a new rating",
                "description": "Adds a new rating to the database",
                "operationId": "5cd8244a0d463d65c3d4aff9bb590d0f",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "value",
                                    "user_id",
                                    "product_id"
                                ],
                                "properties": {
                                    "value": {
                                        "description": "Rating value",
                                        "type": "integer",
                                        "example": 4
                                    },
                                    "user_id": {
                                        "description": "ID of the user",
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "product_id": {
                                        "description": "ID of the product",
                                        "type": "integer",
                                        "example": 1
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Rating created"
                    },
                    "400": {
                        "description": "Bad request"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/ratings/{id}": {
            "get": {
                "tags": [
                    "Ratings"
                ],
                "summary": "Get a rating by ID",
                "description": "Returns a single rating",
                "operationId": "a23bc6dde24ed9bb926230d01bf5a660",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the rating to retrieve",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Rating found"
                    },
                    "404": {
                        "description": "Rating not found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "Ratings"
                ],
                "summary": "Update an existing rating",
                "description": "Updates rating details by ID",
                "operationId": "ca59d81cdb79286ecfa7d4a5740e54b4",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the rating to update",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "value": {
                                        "description": "Updated rating value",
                                        "type": "integer",
                                        "example": 5
                                    },
                                    "user_id": {
                                        "description": "ID of the user",
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "product_id": {
                                        "description": "ID of the product",
                                        "type": "integer",
                                        "example": 1
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Rating updated"
                    },
                    "404": {
                        "description": "Rating not found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Ratings"
                ],
                "summary": "Delete a rating",
                "description": "Deletes a rating by ID",
                "operationId": "680f19ca694f23859ba125a877cfbfe8",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the rating to delete",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Rating deleted"
                    },
                    "404": {
                        "description": "Rating not found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/roles": {
            "get": {
                "tags": [
                    "Roles"
                ],
                "summary": "Get list of roles",
                "operationId": "ca86f0a206144dfbd695b749b4b28f9d",
                "responses": {
                    "200": {
                        "description": "List of roles"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Roles"
                ],
                "summary": "Create a new role",
                "operationId": "341b8b162b61267c7bd187500aea5bc4",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "example": "Admin"
                                    },
                                    "slug": {
                                        "type": "string",
                                        "example": "admin"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Role created successfully"
                    },
                    "400": {
                        "description": "Validation errors"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/roles/{id}": {
            "get": {
                "tags": [
                    "Roles"
                ],
                "summary": "Get role by ID",
                "operationId": "15c404caf238f1861c81f68205d328e5",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Role ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Role data"
                    },
                    "404": {
                        "description": "Role not found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "Roles"
                ],
                "summary": "Update role",
                "operationId": "c73ab816ae8fb7c34a995d37ba577082",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Role ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "example": "Admin"
                                    },
                                    "slug": {
                                        "type": "string",
                                        "example": "admin"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Role updated successfully"
                    },
                    "404": {
                        "description": "Role not found"
                    },
                    "400": {
                        "description": "Validation errors"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Roles"
                ],
                "summary": "Delete role",
                "operationId": "ffa6ef115d86b00cc6c54a6210019f9c",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Role ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Role deleted successfully"
                    },
                    "404": {
                        "description": "Role not found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/stores": {
            "get": {
                "tags": [
                    "Stores"
                ],
                "summary": "Get a list of stores",
                "description": "Returns a list of all stores.",
                "operationId": "e831a4b9bd976ace0737af46366d12dd",
                "responses": {
                    "200": {
                        "description": "Successful operation"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Stores"
                ],
                "summary": "Create a new store",
                "description": "Adds a new store to the database",
                "operationId": "4a83023e072675c6efe83f8e431a1cf5",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "name",
                                    "location"
                                ],
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "example": "SuperMart"
                                    },
                                    "location": {
                                        "type": "string",
                                        "example": "123 Main St"
                                    },
                                    "description": {
                                        "type": "string",
                                        "example": "A local grocery store"
                                    },
                                    "owner_id": {
                                        "type": "integer",
                                        "example": 1
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Store created"
                    },
                    "400": {
                        "description": "Bad request"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/stores/{id}": {
            "get": {
                "tags": [
                    "Stores"
                ],
                "summary": "Get a store by ID",
                "description": "Returns a single store",
                "operationId": "ea10b0258052408368719189a3cb8297",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of store to retrieve",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Store found"
                    },
                    "404": {
                        "description": "Store not found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "Stores"
                ],
                "summary": "Update an existing store",
                "description": "Updates store details by ID",
                "operationId": "4a346060fd92e05694c2d85ade5c5b0e",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of store to update",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "example": "SuperMart Updated"
                                    },
                                    "location": {
                                        "type": "string",
                                        "example": "456 Main St"
                                    },
                                    "description": {
                                        "type": "string",
                                        "example": "An updated local grocery store"
                                    },
                                    "owner_id": {
                                        "type": "integer",
                                        "example": 2
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Store updated"
                    },
                    "404": {
                        "description": "Store not found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Stores"
                ],
                "summary": "Delete a store",
                "description": "Deletes a store by ID",
                "operationId": "e27c62be54a20ed14a4d105410f4ad64",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of store to delete",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Store deleted"
                    },
                    "404": {
                        "description": "Store not found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/subscriptions": {
            "get": {
                "tags": [
                    "Subscriptions"
                ],
                "summary": "Get a list of subscriptions",
                "description": "Returns a list of all subscription items for the authenticated user.",
                "operationId": "351423904a0a5ffde2680533b3076476",
                "responses": {
                    "200": {
                        "description": "Successful operation"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Subscriptions"
                ],
                "summary": "Add a subscription item",
                "description": "Adds a new item to the user's subscriptions list",
                "operationId": "e95a22144803689290e2415240feac54",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "master_id"
                                ],
                                "properties": {
                                    "master_id": {
                                        "description": "ID of the master to subscription",
                                        "type": "integer"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "subscription item created"
                    },
                    "400": {
                        "description": "Bad request"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/subscriptions/{id}": {
            "delete": {
                "tags": [
                    "Subscriptions"
                ],
                "summary": "Remove a subscription item",
                "description": "Removes an item from the user's subscriptions list",
                "operationId": "ddce299ca1d1c1071853826fa9bc3b5c",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the subscription item to remove",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "subscription item deleted"
                    },
                    "404": {
                        "description": "subscription item not found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/surveys/GetSurveyWithDefaultAnswers/{video_id}": {
            "get": {
                "tags": [
                    "Surveys"
                ],
                "summary": "Получить вопросы с опциями и значениями по ID видео и анкеты",
                "description": "Возвращает вопросы анкеты с указанным survey_id, включая связанные опции и значения custom_value, основываясь на DefaultAnswer для указанного video_id.",
                "operationId": "5156c26da5f6794f2c93aa39bac6940b",
                "parameters": [
                    {
                        "name": "video_id",
                        "in": "path",
                        "description": "ID видео для фильтрации DefaultAnswer",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Успешный ответ",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "id": {
                                            "description": "ID анкеты",
                                            "type": "integer"
                                        },
                                        "title": {
                                            "description": "Название анкеты",
                                            "type": "string"
                                        },
                                        "description": {
                                            "description": "Описание анкеты",
                                            "type": "string"
                                        },
                                        "questions": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "id": {
                                                        "description": "ID вопроса",
                                                        "type": "integer"
                                                    },
                                                    "text": {
                                                        "description": "Текст вопроса",
                                                        "type": "string"
                                                    },
                                                    "type_id": {
                                                        "description": "Тип вопроса",
                                                        "type": "integer"
                                                    },
                                                    "options": {
                                                        "description": "Список связанных опций",
                                                        "type": "array",
                                                        "items": {
                                                            "properties": {
                                                                "id": {
                                                                    "description": "ID опции",
                                                                    "type": "integer"
                                                                },
                                                                "option_text": {
                                                                    "description": "Текст опции",
                                                                    "type": "string"
                                                                },
                                                                "answered": {
                                                                    "description": "Помечена ли опция как выбранная",
                                                                    "type": "boolean"
                                                                }
                                                            },
                                                            "type": "object"
                                                        }
                                                    },
                                                    "custom_value": {
                                                        "description": "Пользовательское значение для вопроса",
                                                        "type": "string",
                                                        "nullable": true
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Анкета или видео не найдены",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Survey not found"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/surveys": {
            "get": {
                "tags": [
                    "Surveys"
                ],
                "summary": "Get a list of surveys",
                "description": "Returns a list of all surveys.",
                "operationId": "ac58497c90e6afa386329466fa1f5db2",
                "responses": {
                    "200": {
                        "description": "Successful operation"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Surveys"
                ],
                "summary": "Create a new survey",
                "description": "Creates a new survey",
                "operationId": "ce9e02ee61de80a47635caad8e5bd1fe",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "title",
                                    "description"
                                ],
                                "properties": {
                                    "title": {
                                        "description": "Title of the survey",
                                        "type": "string"
                                    },
                                    "description": {
                                        "description": "Description of the survey",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Survey created successfully"
                    },
                    "400": {
                        "description": "Bad request"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/surveys/{id}": {
            "get": {
                "tags": [
                    "Surveys"
                ],
                "summary": "Get a survey by ID",
                "description": "Returns a single survey",
                "operationId": "a635bd7a1881c50787e40563bd6c5d10",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the survey",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation"
                    },
                    "404": {
                        "description": "Survey not found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "Surveys"
                ],
                "summary": "Update a survey",
                "description": "Updates an existing survey",
                "operationId": "8c298ba5a9874da71a9f7dfd4b99a399",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the survey to update",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "title": {
                                        "description": "Title of the survey",
                                        "type": "string"
                                    },
                                    "description": {
                                        "description": "Description of the survey",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Survey updated successfully"
                    },
                    "404": {
                        "description": "Survey not found"
                    },
                    "400": {
                        "description": "Bad request"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Surveys"
                ],
                "summary": "Delete a survey",
                "description": "Deletes a survey by ID",
                "operationId": "78752343bbaba615e5b9a2580bb64244",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the survey to delete",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Survey deleted successfully"
                    },
                    "404": {
                        "description": "Survey not found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/tags": {
            "get": {
                "tags": [
                    "Tags"
                ],
                "summary": "Get a list of tags",
                "description": "Returns a list of all tags.",
                "operationId": "65f85cc85cd13d2454b6c88ffff5cc3a",
                "responses": {
                    "200": {
                        "description": "Successful operation"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Tags"
                ],
                "summary": "Create a new tag",
                "description": "Adds a new tag to the database",
                "operationId": "467bf3e5824fd78f9cdfb70c0ba9b172",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "name"
                                ],
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "example": "New Tag"
                                    },
                                    "description": {
                                        "type": "string",
                                        "example": "This is a new tag"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Tag created"
                    },
                    "400": {
                        "description": "Bad request"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/tags/{id}": {
            "get": {
                "tags": [
                    "Tags"
                ],
                "summary": "Get a tag by ID",
                "description": "Returns a single tag",
                "operationId": "7dfec953833476181cb9da3ada88ce76",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the tag to retrieve",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Tag found"
                    },
                    "404": {
                        "description": "Tag not found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "Tags"
                ],
                "summary": "Update an existing tag",
                "description": "Updates tag details by ID",
                "operationId": "ad61cc1b60600b578f626a615aec1e46",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the tag to update",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "example": "Updated Tag"
                                    },
                                    "description": {
                                        "type": "string",
                                        "example": "This is an updated tag description"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Tag updated"
                    },
                    "404": {
                        "description": "Tag not found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Tags"
                ],
                "summary": "Delete a tag",
                "description": "Deletes a tag by ID",
                "operationId": "556f3044efa071c0209e19df24a54e3d",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the tag to delete",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Tag deleted"
                    },
                    "404": {
                        "description": "Tag not found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/user_answers/SetUserAnswerImage": {
            "post": {
                "tags": [
                    "UserAnswers"
                ],
                "summary": "Upload a single image",
                "operationId": "uploadImage",
                "requestBody": {
                    "required": true,
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "required": [
                                    "image"
                                ],
                                "properties": {
                                    "image": {
                                        "description": "Single image file",
                                        "type": "string",
                                        "format": "binary"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Image uploaded successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Image uploaded successfully"
                                        },
                                        "image_path": {
                                            "type": "string",
                                            "format": "uri",
                                            "example": "https://example.com/storage/user_answers/images/image1.jpg"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "The image field is required."
                                        },
                                        "errors": {
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/user_answers/GetUserAnswersByVideoID": {
            "post": {
                "tags": [
                    "UserAnswers"
                ],
                "summary": "Get user answers by video ID",
                "operationId": "getUserAnswersByVideoID",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "video_id": {
                                        "description": "ID of the video",
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "user_id": {
                                        "description": "ID of the user (optional)",
                                        "type": "integer"
                                    },
                                    "survey_id": {
                                        "description": "ID of the survey",
                                        "type": "integer",
                                        "example": 1
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Survey with user answers fetched successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "id": {
                                            "type": "integer",
                                            "example": 1
                                        },
                                        "questions": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "id": {
                                                        "type": "integer"
                                                    },
                                                    "question_text": {
                                                        "type": "string"
                                                    },
                                                    "options": {
                                                        "type": "array",
                                                        "items": {
                                                            "properties": {
                                                                "id": {
                                                                    "type": "integer"
                                                                },
                                                                "option_text": {
                                                                    "type": "string"
                                                                }
                                                            },
                                                            "type": "object"
                                                        }
                                                    },
                                                    "custom_value": {
                                                        "type": "string"
                                                    },
                                                    "image_urls": {
                                                        "type": "array",
                                                        "items": {
                                                            "description": "Image file URL",
                                                            "type": "string",
                                                            "format": "uri"
                                                        }
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Survey not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Survey not found"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/user_answers": {
            "get": {
                "tags": [
                    "UserAnswers"
                ],
                "summary": "Get a list of user answers",
                "description": "Returns a list of all user answers.",
                "operationId": "af73caa6e053192572660b3a4b97a791",
                "responses": {
                    "200": {
                        "description": "Successful operation"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "UserAnswers"
                ],
                "summary": "Store answers without images",
                "operationId": "storeAnswersWithoutImages",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "survey_id",
                                    "answers"
                                ],
                                "properties": {
                                    "survey_id": {
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "video_id": {
                                        "type": "integer",
                                        "example": 107
                                    },
                                    "answers": {
                                        "description": "Array of answers",
                                        "type": "array",
                                        "items": {
                                            "required": [
                                                "question_id"
                                            ],
                                            "properties": {
                                                "question_id": {
                                                    "type": "integer",
                                                    "example": 2
                                                },
                                                "option_ids": {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "integer"
                                                    },
                                                    "example": [
                                                        2
                                                    ]
                                                },
                                                "custom_value": {
                                                    "type": "string",
                                                    "example": "string"
                                                },
                                                "image_urls": {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "string"
                                                    },
                                                    "example": [
                                                        "storage/user_answers/images/xfrNqETCemFCWUjMiLSkfamrQmBqVuRyMKfeRsG9.png"
                                                    ]
                                                }
                                            },
                                            "type": "object"
                                        }
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Answers successfully saved",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Answers saved successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/user_answers/AddUserAnswersWithImages": {
            "post": {
                "tags": [
                    "UserAnswers"
                ],
                "summary": "Store answers with images",
                "operationId": "storeAnswersWithImages 1",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "survey_id",
                                    "answers"
                                ],
                                "properties": {
                                    "survey_id": {
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "video_id": {
                                        "type": "integer",
                                        "example": 107
                                    },
                                    "answers": {
                                        "description": "Array of answers",
                                        "type": "array",
                                        "items": {
                                            "required": [
                                                "question_id"
                                            ],
                                            "properties": {
                                                "question_id": {
                                                    "type": "integer",
                                                    "example": 2
                                                },
                                                "option_ids": {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "integer"
                                                    },
                                                    "example": [
                                                        2
                                                    ]
                                                },
                                                "custom_value": {
                                                    "type": "string",
                                                    "example": "string"
                                                },
                                                "image_urls": {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "string"
                                                    },
                                                    "example": [
                                                        "storage/user_answers/images/xfrNqETCemFCWUjMiLSkfamrQmBqVuRyMKfeRsG9.png"
                                                    ]
                                                }
                                            },
                                            "type": "object"
                                        }
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Answers successfully saved",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Answers saved successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/user_answers/{id}": {
            "get": {
                "tags": [
                    "UserAnswers"
                ],
                "summary": "Get a user answer by ID",
                "description": "Returns a single user answer",
                "operationId": "0cc0b754411d9ba7d487daa93fbafe34",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the user answer",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation"
                    },
                    "404": {
                        "description": "User answer not found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "UserAnswers"
                ],
                "summary": "Update user answers",
                "description": "Updates existing user answers for a given survey and video",
                "operationId": "7424dac590b18f47a7abe49c6639703b",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the UserSurvey to be updated",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "survey_id",
                                    "answers"
                                ],
                                "properties": {
                                    "survey_id": {
                                        "description": "ID of the related survey",
                                        "type": "integer",
                                        "example": "1"
                                    },
                                    "video_id": {
                                        "description": "ID of the related video",
                                        "type": "integer",
                                        "nullable": true
                                    },
                                    "answers": {
                                        "description": "Array of answers to be updated",
                                        "type": "array",
                                        "items": {
                                            "required": [
                                                "question_id"
                                            ],
                                            "properties": {
                                                "question_id": {
                                                    "description": "ID of the related question",
                                                    "type": "integer"
                                                },
                                                "option_ids": {
                                                    "description": "Array of selected option IDs",
                                                    "type": "array",
                                                    "items": {
                                                        "type": "integer"
                                                    },
                                                    "nullable": true
                                                },
                                                "custom_value": {
                                                    "description": "Custom answer value (if any)",
                                                    "type": "string",
                                                    "nullable": true
                                                },
                                                "image_urls": {
                                                    "description": "Array of image files (optional)",
                                                    "type": "array",
                                                    "items": {
                                                        "type": "string",
                                                        "format": "binary"
                                                    },
                                                    "nullable": true
                                                }
                                            },
                                            "type": "object"
                                        }
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "User answers updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Survey and answers updated successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "UserSurvey not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "UserSurvey not found"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request due to validation errors or incorrect data",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "errors": {
                                            "type": "object",
                                            "example": {
                                                "survey_id": [
                                                    "The survey_id field is required."
                                                ]
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "UserAnswers"
                ],
                "summary": "Delete a user answer",
                "description": "Deletes a user answer by ID",
                "operationId": "b036435245ae52aaf08e8a5aadc713eb",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the user answer to delete",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "User answer deleted successfully"
                    },
                    "404": {
                        "description": "User answer not found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/user": {
            "get": {
                "tags": [
                    "User"
                ],
                "summary": "Get current user information",
                "description": "Returns information about the currently authenticated user",
                "operationId": "getUserInfo",
                "responses": {
                    "200": {
                        "description": "User information retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "id": {
                                            "type": "integer",
                                            "example": 1
                                        },
                                        "name": {
                                            "type": "string",
                                            "example": "John Doe"
                                        },
                                        "email": {
                                            "type": "string",
                                            "format": "email",
                                            "example": "johndoe@example.com"
                                        },
                                        "phone": {
                                            "type": "string",
                                            "example": "+1234567890"
                                        },
                                        "username": {
                                            "type": "string",
                                            "example": "johndoe"
                                        },
                                        "city_id": {
                                            "type": "integer",
                                            "example": 1
                                        },
                                        "firstname": {
                                            "type": "string",
                                            "example": "John"
                                        },
                                        "lastname": {
                                            "type": "string",
                                            "example": "Doe"
                                        },
                                        "iin": {
                                            "type": "string",
                                            "example": "123456789012"
                                        },
                                        "is_visible": {
                                            "type": "integer",
                                            "example": 1
                                        },
                                        "photo_url": {
                                            "type": "string",
                                            "example": "/storage/photos/johndoe.jpg"
                                        },
                                        "role": {
                                            "type": "string",
                                            "example": "user"
                                        },
                                        "created_at": {
                                            "type": "string",
                                            "format": "date-time",
                                            "example": "2023-01-01T12:00:00Z"
                                        },
                                        "updated_at": {
                                            "type": "string",
                                            "format": "date-time",
                                            "example": "2023-01-01T12:00:00Z"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/users": {
            "get": {
                "tags": [
                    "User"
                ],
                "summary": "Get a list of users",
                "description": "Retrieve a list of users with their roles.",
                "operationId": "566aed8efb436ca506e0ef51a032ecd9",
                "responses": {
                    "200": {
                        "description": "List of users with roles",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "properties": {
                                            "id": {
                                                "type": "integer",
                                                "example": 1
                                            },
                                            "name": {
                                                "type": "string",
                                                "example": "John Doe"
                                            },
                                            "email": {
                                                "type": "string",
                                                "example": "johndoe@example.com"
                                            },
                                            "roles": {
                                                "type": "array",
                                                "items": {
                                                    "type": "object"
                                                }
                                            }
                                        },
                                        "type": "object"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "User"
                ],
                "summary": "Store a newly created user",
                "operationId": "be551c1d694a01c164966f58bfa77013",
                "requestBody": {
                    "required": true,
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "required": [
                                    "name",
                                    "email",
                                    "password",
                                    "password_confirmation",
                                    "phone",
                                    "username",
                                    "city_id",
                                    "firstname",
                                    "lastname",
                                    "iin",
                                    "role"
                                ],
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "example": "John Doe"
                                    },
                                    "email": {
                                        "type": "string",
                                        "format": "email",
                                        "example": "johndoe@example.com"
                                    },
                                    "password": {
                                        "type": "string",
                                        "example": "password123"
                                    },
                                    "password_confirmation": {
                                        "type": "string",
                                        "example": "password123"
                                    },
                                    "phone": {
                                        "type": "string",
                                        "example": "+77473186847"
                                    },
                                    "username": {
                                        "type": "string",
                                        "example": "johndoe"
                                    },
                                    "city_id": {
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "firstname": {
                                        "type": "string",
                                        "example": "John"
                                    },
                                    "lastname": {
                                        "type": "string",
                                        "example": "Doe"
                                    },
                                    "iin": {
                                        "type": "string",
                                        "maxLength": 12,
                                        "example": "123456789014"
                                    },
                                    "is_visible": {
                                        "type": "integer",
                                        "enum": [
                                            1,
                                            0
                                        ],
                                        "example": 1
                                    },
                                    "photo": {
                                        "description": "Upload photo file",
                                        "type": "string",
                                        "format": "binary"
                                    },
                                    "role": {
                                        "type": "string",
                                        "enum": [
                                            "master",
                                            "user"
                                        ],
                                        "example": "user"
                                    },
                                    "company_type": {
                                        "type": "string",
                                        "enum": [
                                            "ИП",
                                            "ТОО"
                                        ],
                                        "example": "ИП"
                                    },
                                    "company_name": {
                                        "type": "string",
                                        "example": "My Company"
                                    },
                                    "description": {
                                        "type": "string",
                                        "example": "Professional service provider"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "User created successfully"
                    },
                    "400": {
                        "description": "Validation error"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/users/{id}": {
            "get": {
                "tags": [
                    "User"
                ],
                "summary": "Display the specified user",
                "operationId": "6f51bd5fa2dddcd25e44cfa53dcbd10a",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the user",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User details"
                    },
                    "400": {
                        "description": "User not found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "User"
                ],
                "summary": "Update user information",
                "description": "Update user profile details",
                "operationId": "updateUser",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the user to update",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "required": [
                                    "_method"
                                ],
                                "properties": {
                                    "_method": {
                                        "description": "Hidden field to simulate PUT method",
                                        "type": "string",
                                        "example": "PUT"
                                    },
                                    "firstname": {
                                        "type": "string",
                                        "example": "John"
                                    },
                                    "lastname": {
                                        "type": "string",
                                        "example": "Doe"
                                    },
                                    "password": {
                                        "type": "string",
                                        "example": "password123"
                                    },
                                    "password_confirmation": {
                                        "type": "string",
                                        "example": "password123"
                                    },
                                    "phone": {
                                        "type": "string",
                                        "example": "+1234567890"
                                    },
                                    "username": {
                                        "type": "string",
                                        "example": "johndoe"
                                    },
                                    "city_id": {
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "iin": {
                                        "type": "string",
                                        "maxLength": 12,
                                        "example": "123456789012"
                                    },
                                    "is_visible": {
                                        "type": "integer",
                                        "enum": [
                                            1,
                                            0
                                        ],
                                        "example": 1
                                    },
                                    "photo": {
                                        "description": "Photo file upload",
                                        "type": "string",
                                        "format": "binary"
                                    },
                                    "role": {
                                        "type": "string",
                                        "enum": [
                                            "master",
                                            "user"
                                        ],
                                        "example": "master"
                                    },
                                    "company_type": {
                                        "type": "string",
                                        "enum": [
                                            "ИП",
                                            "ТОО"
                                        ],
                                        "example": "ИП"
                                    },
                                    "company_name": {
                                        "type": "string",
                                        "example": "My Company"
                                    },
                                    "description": {
                                        "type": "string",
                                        "example": "Professional service provider"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "User updated successfully"
                    },
                    "400": {
                        "description": "Validation error"
                    },
                    "404": {
                        "description": "User not found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "User"
                ],
                "summary": "Remove the specified user",
                "operationId": "0b4133ed462528a5e648b88ead11e929",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the user",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "User deleted successfully"
                    },
                    "400": {
                        "description": "User not found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/variables": {
            "get": {
                "tags": [
                    "Variables"
                ],
                "summary": "Get a list of variables",
                "description": "Returns a list of all variables.",
                "operationId": "c5345d1554561a9a76f66af50e9d97b3",
                "responses": {
                    "200": {
                        "description": "Successful operation"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Variables"
                ],
                "summary": "Create a new variable",
                "description": "Adds a new variable to the database",
                "operationId": "e09bba3715b16661a0342b69a05befc3",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "name",
                                    "value"
                                ],
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "example": "Sample Variable"
                                    },
                                    "value": {
                                        "type": "string",
                                        "example": "Sample Value"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Variable created"
                    },
                    "400": {
                        "description": "Bad request"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/variables/{id}": {
            "get": {
                "tags": [
                    "Variables"
                ],
                "summary": "Get a variable by ID",
                "description": "Returns a single variable",
                "operationId": "975d46bc50c5413e4ec5cc864b73b78b",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the variable to retrieve",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Variable found"
                    },
                    "404": {
                        "description": "Variable not found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "Variables"
                ],
                "summary": "Update an existing variable",
                "description": "Updates variable details by ID",
                "operationId": "4606b774f6738f7fe77bbb6fb1d8a9ca",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the variable to update",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "example": "Updated Variable"
                                    },
                                    "value": {
                                        "type": "string",
                                        "example": "Updated Value"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Variable updated"
                    },
                    "404": {
                        "description": "Variable not found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Variables"
                ],
                "summary": "Delete a variable",
                "description": "Deletes a variable by ID",
                "operationId": "17a1f91f96b385eaefb3f2411564bc02",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the variable to delete",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Variable deleted"
                    },
                    "404": {
                        "description": "Variable not found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/videos/{id}/tapped": {
            "post": {
                "tags": [
                    "Videos"
                ],
                "summary": "Increment video tapped count",
                "description": "Increments the tapped count for a specified video. The user must be authenticated.",
                "operationId": "ba604b3dd7b4429d2c1033edaba19fc6",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the video whose tapped count is to be incremented.",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "example": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "id": {
                                            "type": "integer",
                                            "example": 1
                                        },
                                        "views_count": {
                                            "type": "integer",
                                            "example": 123
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Video not found."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Something went wrong."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/videos/{id}/views": {
            "post": {
                "tags": [
                    "Videos"
                ],
                "summary": "Increment video view count",
                "description": "Increments the view count for a specified video. The user must be authenticated.",
                "operationId": "f4ecf29d08ca2a6e7fcb4ccd1a7d5632",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the video whose view count is to be incremented.",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "example": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "id": {
                                            "type": "integer",
                                            "example": 1
                                        },
                                        "views_count": {
                                            "type": "integer",
                                            "example": 123
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Video not found."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Something went wrong."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/share/{uniqueKey}": {
            "get": {
                "tags": [
                    "Videos"
                ],
                "summary": "Handle shared link and return video data",
                "description": "Handles a shared link and returns the data of the associated video.",
                "operationId": "57f039b1f9d288bc0fb79c0c60d45906",
                "parameters": [
                    {
                        "name": "uniqueKey",
                        "in": "path",
                        "description": "Unique key of the shared link.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "example": "1a2b3c4d5e6f"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "id": {
                                            "type": "integer",
                                            "example": 1
                                        },
                                        "title": {
                                            "type": "string",
                                            "example": "Sample Video"
                                        },
                                        "url": {
                                            "type": "string",
                                            "example": "videos/videos/sample.mp4"
                                        },
                                        "preview_url": {
                                            "type": "string",
                                            "example": "photos/videos/sample_preview.png"
                                        },
                                        "description": {
                                            "type": "string",
                                            "example": "This is a sample video."
                                        },
                                        "tags": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "id": {
                                                        "type": "integer",
                                                        "example": 1
                                                    },
                                                    "name": {
                                                        "type": "string",
                                                        "example": "Tutorial"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Link not found."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Something went wrong."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/videos/GetVideosByTags": {
            "get": {
                "tags": [
                    "Videos"
                ],
                "summary": "Get videos by tags",
                "description": "Returns a list of videos associated with the specified tags.",
                "operationId": "bc785ed29b9ecf3dda6c99ea1a08cff6",
                "parameters": [
                    {
                        "name": "tags[]",
                        "in": "query",
                        "description": "List of tag names to filter videos by. Example: tags[]=Technology&tags[]=News",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "example": "Technology"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "properties": {
                                            "id": {
                                                "type": "integer",
                                                "example": 1
                                            },
                                            "user": {
                                                "properties": {
                                                    "id": {
                                                        "type": "integer",
                                                        "example": 37
                                                    },
                                                    "email": {
                                                        "type": "string",
                                                        "example": "johndoe@example.com"
                                                    },
                                                    "username": {
                                                        "type": "string",
                                                        "example": "johndoe"
                                                    },
                                                    "firstname": {
                                                        "type": "string",
                                                        "example": "John"
                                                    },
                                                    "lastname": {
                                                        "type": "string",
                                                        "example": "Doe"
                                                    },
                                                    "photo_url": {
                                                        "type": "string",
                                                        "example": "photos/users/27_user.jpg"
                                                    },
                                                    "created_at": {
                                                        "type": "string",
                                                        "format": "date-time",
                                                        "example": "2024-11-26T19:34:14.000000Z"
                                                    },
                                                    "updated_at": {
                                                        "type": "string",
                                                        "format": "date-time",
                                                        "example": "2024-11-26T19:34:14.000000Z"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "title": {
                                                "type": "string",
                                                "example": "Sample Video"
                                            },
                                            "furniture_type": {
                                                "type": "string",
                                                "example": "Sample Video"
                                            },
                                            "description": {
                                                "type": "string",
                                                "example": "This is a sample video description."
                                            },
                                            "url": {
                                                "type": "string",
                                                "example": "videos/videos/sample.mp4"
                                            },
                                            "price": {
                                                "type": "string",
                                                "example": "10000.00"
                                            },
                                            "sizes": {
                                                "type": "string",
                                                "example": "1920x1080"
                                            },
                                            "is_fixed": {
                                                "type": "boolean",
                                                "example": false
                                            },
                                            "views_count": {
                                                "type": "integer",
                                                "example": 100
                                            },
                                            "preview_url": {
                                                "type": "string",
                                                "example": "photos/videos/sample.png"
                                            },
                                            "is_visible": {
                                                "type": "boolean",
                                                "example": true
                                            },
                                            "tapped_count": {
                                                "type": "integer",
                                                "example": 10
                                            },
                                            "created_at": {
                                                "type": "string",
                                                "format": "date-time",
                                                "example": "2024-11-26T19:34:14.000000Z"
                                            },
                                            "updated_at": {
                                                "type": "string",
                                                "format": "date-time",
                                                "example": "2024-11-26T19:34:14.000000Z"
                                            },
                                            "is_favorite": {
                                                "type": "boolean",
                                                "example": true
                                            },
                                            "is_subscription": {
                                                "type": "boolean",
                                                "example": true
                                            },
                                            "is_like": {
                                                "type": "boolean",
                                                "example": true
                                            },
                                            "tags": {
                                                "type": "array",
                                                "items": {
                                                    "properties": {
                                                        "id": {
                                                            "type": "integer",
                                                            "example": 1
                                                        },
                                                        "name": {
                                                            "type": "string",
                                                            "example": "Tutorial"
                                                        }
                                                    },
                                                    "type": "object"
                                                }
                                            }
                                        },
                                        "type": "object"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "No tags provided."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Something went wrong."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/videos/GetVideosByUserID/{user_id}": {
            "get": {
                "tags": [
                    "Videos"
                ],
                "summary": "Get user videos",
                "description": "Returns a videos by user id.",
                "operationId": "d7243e2da8f66ae20b5fdb6f8d2becd2",
                "parameters": [
                    {
                        "name": "user_id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "example": 2
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response"
                    },
                    "404": {
                        "description": "User not found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/videos": {
            "get": {
                "tags": [
                    "Videos"
                ],
                "summary": "Get paginated videos list",
                "description": "Returns a paginated list of videos. If the end of the list is reached, it starts over from the beginning.",
                "operationId": "2090c29a8b2a49778e2de02f54ec7606",
                "parameters": [
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page number for pagination (default is 1).",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "example": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "current_page": {
                                            "type": "integer",
                                            "example": 1
                                        },
                                        "videos": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "id": {
                                                        "type": "integer",
                                                        "example": 38
                                                    },
                                                    "user": {
                                                        "properties": {
                                                            "id": {
                                                                "type": "integer",
                                                                "example": 37
                                                            },
                                                            "email": {
                                                                "type": "string",
                                                                "example": "johndoe@example.com"
                                                            },
                                                            "phone": {
                                                                "type": "string",
                                                                "example": "77713985075"
                                                            },
                                                            "username": {
                                                                "type": "string",
                                                                "example": "johndoe"
                                                            },
                                                            "city_id": {
                                                                "type": "string",
                                                                "example": "1"
                                                            },
                                                            "firstname": {
                                                                "type": "string",
                                                                "example": "John"
                                                            },
                                                            "lastname": {
                                                                "type": "string",
                                                                "example": "Doe"
                                                            },
                                                            "iin": {
                                                                "type": "string",
                                                                "example": "123456789012"
                                                            },
                                                            "is_visible": {
                                                                "type": "boolean",
                                                                "example": true
                                                            },
                                                            "photo_url": {
                                                                "type": "string",
                                                                "example": "photos/users/27_user.jpg"
                                                            },
                                                            "is_verified": {
                                                                "type": "boolean",
                                                                "example": false
                                                            },
                                                            "created_at": {
                                                                "type": "string",
                                                                "format": "date-time",
                                                                "example": "2024-11-14T16:06:57.000000Z"
                                                            },
                                                            "updated_at": {
                                                                "type": "string",
                                                                "format": "date-time",
                                                                "example": "2024-11-14T16:35:04.000000Z"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "title": {
                                                        "type": "string",
                                                        "example": "Sample Video"
                                                    },
                                                    "furniture_type": {
                                                        "type": "string",
                                                        "example": "Sample Video"
                                                    },
                                                    "description": {
                                                        "type": "string",
                                                        "example": "This is a sample video description."
                                                    },
                                                    "url": {
                                                        "type": "string",
                                                        "example": "videos/videos/iOzTxunfY5ebV7S7DJConO8NTemUuHHVkVVYiU3J.mp4"
                                                    },
                                                    "price": {
                                                        "type": "string",
                                                        "example": "10000.00"
                                                    },
                                                    "sizes": {
                                                        "type": "string",
                                                        "example": "10*10"
                                                    },
                                                    "is_fixed": {
                                                        "type": "boolean",
                                                        "example": false
                                                    },
                                                    "views_count": {
                                                        "type": "integer",
                                                        "example": 0
                                                    },
                                                    "preview_url": {
                                                        "type": "string",
                                                        "example": "photos/videos/HQ0wfLKvasgWvoGVyNgOfuWEXXudUngs0SmkhzwE.png"
                                                    },
                                                    "is_visible": {
                                                        "type": "boolean",
                                                        "example": true
                                                    },
                                                    "tapped_count": {
                                                        "type": "integer",
                                                        "example": 0
                                                    },
                                                    "created_at": {
                                                        "type": "string",
                                                        "format": "date-time",
                                                        "example": "2024-11-26T19:34:14.000000Z"
                                                    },
                                                    "updated_at": {
                                                        "type": "string",
                                                        "format": "date-time",
                                                        "example": "2024-11-26T19:34:14.000000Z"
                                                    },
                                                    "is_favorite": {
                                                        "type": "boolean",
                                                        "example": true
                                                    },
                                                    "is_subscription": {
                                                        "type": "boolean",
                                                        "example": true
                                                    },
                                                    "is_like": {
                                                        "type": "boolean",
                                                        "example": true
                                                    },
                                                    "tags": {
                                                        "type": "array",
                                                        "items": {
                                                            "properties": {
                                                                "id": {
                                                                    "type": "integer",
                                                                    "example": 1
                                                                },
                                                                "name": {
                                                                    "type": "string",
                                                                    "example": "Tutorial"
                                                                }
                                                            },
                                                            "type": "object"
                                                        }
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Something went wrong."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Videos"
                ],
                "summary": "Create a new video with tags",
                "description": "Adds a new video to the database with optional tags",
                "operationId": "904069e3a71065b7227cc44e7dc50fb2",
                "requestBody": {
                    "required": true,
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "required": [
                                    "furniture_type",
                                    "url"
                                ],
                                "properties": {
                                    "title": {
                                        "type": "string",
                                        "example": "Sample Video"
                                    },
                                    "furniture_type": {
                                        "type": "string",
                                        "example": "Sample Video"
                                    },
                                    "description": {
                                        "type": "string",
                                        "example": "This is a sample video description."
                                    },
                                    "url": {
                                        "description": "Video file upload (e.g., mp4)",
                                        "type": "string",
                                        "format": "binary"
                                    },
                                    "price": {
                                        "type": "number",
                                        "format": "float",
                                        "example": "10.50"
                                    },
                                    "sizes": {
                                        "type": "string",
                                        "example": "1920x1080"
                                    },
                                    "is_fixed": {
                                        "type": "integer",
                                        "enum": [
                                            1,
                                            0
                                        ],
                                        "example": 0
                                    },
                                    "in_stock": {
                                        "type": "integer",
                                        "enum": [
                                            1,
                                            0
                                        ],
                                        "example": 0
                                    },
                                    "preview_url": {
                                        "description": "Preview image file upload (e.g., jpeg, png)",
                                        "type": "string",
                                        "format": "binary"
                                    },
                                    "tags[]": {
                                        "description": "Array of tag IDs to associate with the video",
                                        "type": "array",
                                        "items": {
                                            "type": "integer",
                                            "example": 1
                                        }
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Video created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "id": {
                                            "type": "integer",
                                            "example": 1
                                        },
                                        "title": {
                                            "type": "string",
                                            "example": "Sample Video"
                                        },
                                        "furniture_type": {
                                            "type": "string",
                                            "example": "Sample Video"
                                        },
                                        "description": {
                                            "type": "string",
                                            "example": "This is a sample video description."
                                        },
                                        "url": {
                                            "type": "string",
                                            "example": "videos/videos/sample.mp4"
                                        },
                                        "price": {
                                            "type": "number",
                                            "format": "float",
                                            "example": "10.50"
                                        },
                                        "sizes": {
                                            "type": "string",
                                            "example": "1920x1080"
                                        },
                                        "is_fixed": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "preview_url": {
                                            "type": "string",
                                            "example": "photos/videos/sample-preview.jpg"
                                        },
                                        "tags": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "id": {
                                                        "type": "integer",
                                                        "example": 1
                                                    },
                                                    "name": {
                                                        "type": "string",
                                                        "example": "Technology"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/videos/{id}": {
            "get": {
                "tags": [
                    "Videos"
                ],
                "summary": "Get video details",
                "description": "Returns detailed information about a specific video, including its owner, tags, and favorite or subscription status.",
                "operationId": "d5190024e38b00df6680e59ca8a482b2",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the video to retrieve.",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "example": 38
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "id": {
                                            "type": "integer",
                                            "example": 38
                                        },
                                        "user": {
                                            "properties": {
                                                "id": {
                                                    "type": "integer",
                                                    "example": 37
                                                },
                                                "email": {
                                                    "type": "string",
                                                    "example": "johndoe@example.com"
                                                },
                                                "phone": {
                                                    "type": "string",
                                                    "example": "77777777777"
                                                },
                                                "username": {
                                                    "type": "string",
                                                    "example": "johndoe"
                                                },
                                                "firstname": {
                                                    "type": "string",
                                                    "example": "John"
                                                },
                                                "lastname": {
                                                    "type": "string",
                                                    "example": "Doe"
                                                }
                                            },
                                            "type": "object"
                                        },
                                        "title": {
                                            "type": "string",
                                            "example": "Sample Video"
                                        },
                                        "furniture_type": {
                                            "type": "string",
                                            "example": "Sample Video"
                                        },
                                        "description": {
                                            "type": "string",
                                            "example": "This is a sample video description."
                                        },
                                        "url": {
                                            "type": "string",
                                            "example": "videos/videos/sample_video.mp4"
                                        },
                                        "is_favorite": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "is_subscription": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "is_like": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "tags": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "id": {
                                                        "type": "integer",
                                                        "example": 1
                                                    },
                                                    "name": {
                                                        "type": "string",
                                                        "example": "Tutorial"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Video not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Video not found."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Videos"
                ],
                "summary": "Update video information",
                "description": "Updates a video record by ID",
                "operationId": "929e2d84c93ed2522ffe85e6e8ecc0d5",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the video to update",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "required": [
                                    "_method"
                                ],
                                "properties": {
                                    "_method": {
                                        "description": "Hidden field to simulate PUT method",
                                        "type": "string",
                                        "example": "PUT"
                                    },
                                    "title": {
                                        "description": "Video title",
                                        "type": "string"
                                    },
                                    "furniture_type": {
                                        "description": "Furniture type associated with the video",
                                        "type": "string"
                                    },
                                    "description": {
                                        "description": "Description of the video",
                                        "type": "string"
                                    },
                                    "url": {
                                        "description": "Video file (mp4, webm, etc.)",
                                        "type": "string",
                                        "format": "binary"
                                    },
                                    "price": {
                                        "description": "Price associated with the video",
                                        "type": "number",
                                        "format": "float"
                                    },
                                    "sizes": {
                                        "description": "Sizes related to the video",
                                        "type": "string"
                                    },
                                    "is_fixed": {
                                        "description": "Whether the video is fixed or not",
                                        "type": "integer",
                                        "enum": [
                                            1,
                                            0
                                        ],
                                        "example": 0
                                    },
                                    "is_visible": {
                                        "description": "Visibility status of the video",
                                        "type": "integer",
                                        "enum": [
                                            1,
                                            0
                                        ],
                                        "example": 0
                                    },
                                    "in_stock": {
                                        "description": "Visibility status of the video",
                                        "type": "integer",
                                        "enum": [
                                            1,
                                            0
                                        ],
                                        "example": 0
                                    },
                                    "preview_url": {
                                        "description": "Preview image file (jpg, png, etc.)",
                                        "type": "string",
                                        "format": "binary"
                                    },
                                    "tags[]": {
                                        "description": "Array of tag IDs",
                                        "type": "array",
                                        "items": {
                                            "type": "integer"
                                        }
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Video created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "id": {
                                            "type": "integer",
                                            "example": 1
                                        },
                                        "title": {
                                            "type": "string",
                                            "example": "Sample Video"
                                        },
                                        "furniture_type": {
                                            "type": "string",
                                            "example": "Sample Video"
                                        },
                                        "description": {
                                            "type": "string",
                                            "example": "This is a sample video description."
                                        },
                                        "url": {
                                            "type": "string",
                                            "example": "videos/videos/sample.mp4"
                                        },
                                        "price": {
                                            "type": "number",
                                            "format": "float",
                                            "example": "10.50"
                                        },
                                        "sizes": {
                                            "type": "string",
                                            "example": "1920x1080"
                                        },
                                        "is_fixed": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "preview_url": {
                                            "type": "string",
                                            "example": "photos/videos/sample-preview.jpg"
                                        },
                                        "tags": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "id": {
                                                        "type": "integer",
                                                        "example": 1
                                                    },
                                                    "name": {
                                                        "type": "string",
                                                        "example": "Technology"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "404": {
                        "description": "Video not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Video not found"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Videos"
                ],
                "summary": "Delete a video",
                "description": "Deletes a video by ID",
                "operationId": "b8887a2f4df0b20670119bbb04b51e11",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the video to delete",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Video deleted"
                    },
                    "404": {
                        "description": "Video not found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        }
    },
    "components": {
        "securitySchemes": {
            "sanctum": {
                "type": "apiKey",
                "description": "Enter token in format (Bearer <token>)",
                "name": "Authorization",
                "in": "header"
            }
        }
    },
    "tags": [
        {
            "name": "Auth",
            "description": "Auth"
        },
        {
            "name": "Cities",
            "description": "Cities"
        },
        {
            "name": "Company Types",
            "description": "Company Types"
        },
        {
            "name": "Countries",
            "description": "Countries"
        },
        {
            "name": "DefaultAnswers",
            "description": "DefaultAnswers"
        },
        {
            "name": "Favorites",
            "description": "Favorites"
        },
        {
            "name": "Files",
            "description": "Files"
        },
        {
            "name": "Likes",
            "description": "Likes"
        },
        {
            "name": "Options",
            "description": "Options"
        },
        {
            "name": "Quick Orders",
            "description": "Quick Orders"
        },
        {
            "name": "Orders",
            "description": "Orders"
        },
        {
            "name": "Order Reports",
            "description": "Order Reports"
        },
        {
            "name": "Order Statuses",
            "description": "Order Statuses"
        },
        {
            "name": "Payments",
            "description": "Payments"
        },
        {
            "name": "Payment Statuses",
            "description": "Payment Statuses"
        },
        {
            "name": "Questions",
            "description": "Questions"
        },
        {
            "name": "Question Types",
            "description": "Question Types"
        },
        {
            "name": "Ratings",
            "description": "Ratings"
        },
        {
            "name": "Roles",
            "description": "Roles"
        },
        {
            "name": "Stores",
            "description": "Stores"
        },
        {
            "name": "Subscriptions",
            "description": "Subscriptions"
        },
        {
            "name": "Surveys",
            "description": "Surveys"
        },
        {
            "name": "Tags",
            "description": "Tags"
        },
        {
            "name": "UserAnswers",
            "description": "UserAnswers"
        },
        {
            "name": "User",
            "description": "User"
        },
        {
            "name": "Variables",
            "description": "Variables"
        },
        {
            "name": "Videos",
            "description": "Videos"
        }
    ]
}